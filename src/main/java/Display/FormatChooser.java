/*
Copyright (C) 2010 Alex Billingsley, email@alexbillingsley.co.uk
www.dragmath.bham.ac.uk
 
 This file is part of DragMath.

    DragMath is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    DragMath is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with DragMath. If not, see <http://www.gnu.org/licenses/>.

 */

package Display;

import java.net.*;
import java.io.*;
import org.jdom.*;
import org.jdom.input.*;
import javax.swing.*;
import Output.OutputFormat;

/**
 *
 * @author  Alex Billingsley
 */
public class FormatChooser extends javax.swing.JFrame {
    
    private int type;
    private Document configFile;
    private Element lang;
    private Element format;
    private OutputFormat output;
    private LanguageManager langMan;
    private SAXBuilder builder;
    private java.util.List formats;
    private java.util.List langs;
    
    /** Creates new form FormatChooser */
    public FormatChooser(URL appletCodeBase, int type, OutputFormat output, LanguageManager langMan) {
        initComponents();
        
        // 0 - formats
        // 1- lang
        this.type=type;
        this.output=output;
        this.langMan = langMan;
        builder = new SAXBuilder();
        
        try {
            URL path = new URL(appletCodeBase + "Config.xml");
            configFile = builder.build(path);
        } catch (java.io.FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null, ex.getClass().getName() + ": " + ex.getLocalizedMessage() + " : " + "Error reading config file", "DragMath222", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, ex.getClass().getName() + ": " + ex.getLocalizedMessage() + " : " + "Error reading config file", "DragMath222", JOptionPane.ERROR_MESSAGE);
        } catch (JDOMException ex) {
            JOptionPane.showMessageDialog(null, ex.getClass().getName() + ": " + ex.getLocalizedMessage() + " : " + "Error reading config file", "DragMath222", JOptionPane.ERROR_MESSAGE);
        }
        
        if (configFile != null) {
            // Export formats
            if (type == 0) {
                format = configFile.getRootElement();
                format = format.getChild("Formats");
                formats = format.getChildren("Format");
                int i=0;
                Object[] files = new Object[formats.size()];
                while (i < formats.size()) {
                    Element temp = (Element)formats.get(i);
                    files[i] = temp.getAttributeValue("displayName");
                    i++;
                }
                jListFiles.setListData(files);
            }
            // Languages
            if (type == 1) {
                lang = configFile.getRootElement();
                lang = lang.getChild("Languages");
                langs = lang.getChildren("Lang");
                int i=0;
                Object[] files = new Object[langs.size()];
                while (i < langs.size()) {
                    Element temp = (Element)langs.get(i);
                    files[i] = temp.getAttributeValue("displayName");
                    i++;
                }
                jListFiles.setListData(files);
            }
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jScrollPane1 = new javax.swing.JScrollPane();
        jListFiles = new javax.swing.JList();
        jButtonOK = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("DragMath");
        setResizable(false);
        jListFiles.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jListFiles);

        jButtonOK.setText("OK");
        jButtonOK.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonOKMouseClicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jButtonOK, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 59, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 186, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 174, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(15, 15, 15)
                .add(jButtonOK)
                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void jButtonOKMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonOKMouseClicked
        // Export format
        if (type == 0) {
            int index = jListFiles.getSelectedIndex();
            if (index != -1) {
                Element temp = (Element)formats.get(index);
                String fileName = temp.getAttributeValue("fileName");
                if (fileName != null) {
                    output.readFormatFile(fileName);
                }
            }
        }
        // Language
        if (type == 1) {
            int index = jListFiles.getSelectedIndex();
            if (index != -1) {
                Element temp = (Element)langs.get(index);
                String fileName = temp.getAttributeValue("fileName");
                if (fileName != null) {
                    langMan.loadLanguageFile(fileName);
                }
            }
        }
        this.dispose();
    }//GEN-LAST:event_jButtonOKMouseClicked
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonOK;
    private javax.swing.JList jListFiles;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    
}
